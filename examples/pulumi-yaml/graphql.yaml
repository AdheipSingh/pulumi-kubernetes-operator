apiVersion: pulumi.com/v1
kind: Stack
metadata:
  name: graphql-example
spec:
  stack: graphql-example
  programRef:
    name: graphql-example
  destroyOnFinalize: true
  envRefs:
    PULUMI_ACCESS_TOKEN:
      type: Secret
      secret:
        name: pulumi-api-secret
        key: accessToken
    AWS_ACCESS_KEY_ID:
      type: Secret
      secret:
        name: aws-secret
        key: accessKeyID
    AWS_SECRET_ACCESS_KEY:
      type: Secret
      secret:
        name: aws-secret
        key: secretAccessKey
    AWS_REGION:
      type: Secret
      secret:
        name: aws-secret
        key: region
    AWS_SESSION_TOKEN:
      type: Secret
      secret:
        name: aws-secret
        key: sessionToken
---
apiVersion: pulumi.com/v1
kind: Program
metadata:
  name: graphql-example
program:
  resources:
    tenants:
      type: aws:dynamodb:Table
      properties:
        hashKey: id
        attributes:
          - name: id
            type: S
        readCapacity: 1
        writeCapacity: 1
    api:
      type: aws:appsync:GraphQLApi
      properties:
        authenticationType: API_KEY
        schema: |+
          type Query {
              getTenantById(id: ID!): Tenant
          }
          type Mutation {
              addTenant(id: ID!, name: String!): Tenant!
          }
          type Tenant {
              id: ID!
              name: String
          }
          schema {
              query: Query
              mutation: Mutation
          }
    key:
      type: aws:appsync:ApiKey
      properties:
        apiId: ${api.id}
    random-datasource-name:
      type: random:RandomString
      properties:
        length: 15
        special: false
        number: false
    tenants-ds:
      type: aws:appsync:DataSource
      properties:
        name: ${random-datasource-name.result}
        apiId: ${api.id}
        type: AMAZON_DYNAMODB
        dynamodbConfig:
          tableName: ${tenants.name}
        serviceRoleArn: ${iam-role.arn}
    get-resolver:
      type: aws:appsync:Resolver
      properties:
        apiId: ${api.id}
        dataSource: ${tenants-ds.name}
        type: Query
        field: getTenantById
        requestTemplate: |
          {
            "version": "2017-02-28",
            "operation": "GetItem",
            "key": {
                "id": $util.dynamodb.toDynamoDBJson($ctx.args.id),
            }
          }
        responseTemplate: $util.toJson($ctx.result)
    add-resolver:
      type: aws:appsync:Resolver
      properties:
        apiId: ${api.id}
        dataSource: ${tenants-ds.name}
        type: Mutation
        field: addTenant
        requestTemplate: |
          {
              "version" : "2017-02-28",
              "operation" : "PutItem",
              "key" : {
                  "id" : $util.dynamodb.toDynamoDBJson($ctx.args.id)
              },
              "attributeValues" : {
                  "name": $util.dynamodb.toDynamoDBJson($ctx.args.name)
              }
          }
        responseTemplate: $util.toJson($ctx.result)
    iam-role:
      type: aws:iam:Role
      properties:
        assumeRolePolicy:
          Fn::ToJSON:
            Version: 2012-10-17
            Statement:
              - Action: sts:AssumeRole
                Effect: Allow
                Principal:
                  Service: appsync.amazonaws.com
    policy:
      type: aws:iam:Policy
      properties:
        policy: ${policyDocument.json}
    role-attachment:
      type: aws:iam:RolePolicyAttachment
      properties:
        role: ${iam-role.name}
        policyArn: ${policy.arn}
  variables:
    policyDocument:
      Fn::Invoke:
        Function: aws:iam:getPolicyDocument
        Arguments:
          statements:
            - actions:
                - dynamodb:PutItem
                - dynamodb:GetItem
              resources:
                - ${tenants.arn}
  outputs:
    endpoint: ${api.uris["GRAPHQL"]}
    key: ${key.key}